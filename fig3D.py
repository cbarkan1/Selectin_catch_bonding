import numpy as np
import matplotlib.pyplot as plt


file = np.load('E_sLex_tuned.npz')
fs = file['fs']
taus = file['taus']


### Two-state model lifetime distribution: "Two-state_model_fits.py" in selectins_manuscript
file = np.load('two-state_lifetime_distribution_E-sel.npz')
ts_2state = file['ts']
P_taus_2state = file['P_taus']

point_index = 40
print('f = ',fs[point_index])
ts = np.linspace(0,2)
p_L_model = 1/taus[point_index] * np.exp(-ts/taus[point_index] )
#quit()

#These are lifetimes for E-selectin at 48pN
lifetimes = [0.021015761821366025,	0.07705779334500876,	0.1330998248686515,	0.2031523642732049,	0.24518388791593695,	0.30122591943957966,	0.350262697022767,	0.4203152364273205,	0.51138353765324,	0.5884413309982486,	0.6514886164623468,	0.6514886164623468,	0.8056042031523643,	0.861646234676007,	0.9316987740805605,	1.0017513134851137,	1.0577933450087567,	1.106830122591944,	1.1698774080560421,	1.2609457092819616,	1.3099824868651486,	1.295971978984238,	1.436077057793345,	1.4851138353765325,	1.597197898423818,	1.6042031523642732,	1.8003502626970227,	1.8563922942206652]
log_num_remaining = np.array([4.275659824,	4.152492669	,3.994134897,	3.906158358,	3.782991202	,3.695014663	,3.589442815	,3.46627566	,3.307917889	,3.184750733	,3.04398827,	2.991202346	,2.868035191,	2.797653959,	2.709677419,	2.568914956	,2.428152493,	2.304985337	,2.164222874	,2.093841642	,1.935483871,	1.7771261	,1.583577713	,1.372434018	,1.108504399	,1.090909091,	0.686217009,	0])

lifetimes = [0.026490066225165546,	0.05298013245033113,	0.13245033112582777,	0.16777041942604853,	0.2030905077262693,	0.23399558498896245,	0.27814569536423833,	0.3178807947019867,	0.3399558498896247,	0.3752759381898454,	0.4282560706401765,	0.5121412803532008,	0.5960264900662252,	0.6490066225165562,	0.8079470198675497,	0.847682119205298,	0.8697571743929359,	0.9006622516556291,	0.9315673289183222,	0.997792494481236,	1.0507726269315671,	1.0993377483443707,	1.1699779249448123,	1.2671081677704192,	1.3068432671081678,	1.3112582781456954,	1.4348785871964678,	1.496688741721854,	1.5982339955849887,	1.7924944812362027,	1.8543046357615893]
log_num_remaining = np.array([4.311258278,	4.222516556,	4.011846946,	3.945376502,	3.867794947,	3.834633309,	3.723767476,	3.646210449,	3.56855531,	3.490973755,	3.4023792,	3.336178563,	3.181089036	,2.959161148,	2.882266372,	2.838042678,	2.815943095,	2.749448124,	2.705175374,	2.561098847,	2.439170959,	2.294996321,	2.173166544,	2.073706156,	1.962815796,	1.796173657,	1.607971548,	1.386092715,	1.097767967,	0.732180525	,0.010301692])


reported_slope = -1.93
tau = -1/reported_slope
fraction_remaining = np.exp(log_num_remaining)
fraction_remaining /= fraction_remaining[0]
p_L_data = fraction_remaining/tau
plt.figure(figsize=(2.8,2))
plt.plot(lifetimes,np.log10(p_L_data),'D',color='#2a9d8f',markersize=6)
plt.plot(ts,np.log10(p_L_model),'k',linewidth=3)
plt.plot(ts_2state,np.log10(P_taus_2state),color='#e07a5f',linewidth=2)
#plt.yscale('log')
plt.xlim(0,2.)
plt.gca().set_xticks([0,.5,1,1.5,2])
plt.gca().set_xticklabels([0,'','','',2])
plt.gca().set_yticks([-2,-1,0,1,2])
plt.gca().set_yticklabels([-2,'','','',2])

plt.savefig('E_survival_plot.eps',transparent=True)

plt.show()






